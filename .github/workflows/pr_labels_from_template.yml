name: PR → Labels from checkboxes

on:
  # We use pull_request_target to allow the workflow to label PRs even from forks.
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Apply labels based on PR checkboxes
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = (pr.body || "").toString();

            // Patterns that match our checkboxes from the PR template
            const bugfixChecked = /-\s*\[[xX]\]\s*\*\*This is a bugfix\*\*/.test(body);
            const inNextChecked = /-\s*\[[xX]\]\s*\*\*Include in next stabilisation release\*\*/.test(body);
            const bugfixPresent  = /-\s*\[[ xX]\]\s*\*\*This is a bugfix\*\*/.test(body);
            const inNextPresent  = /-\s*\[[ xX]\]\s*\*\*Include in next stabilisation release\*\*/.test(body);

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const issue_number = pr.number;

            // Label names we control
            const BUGFIX = "bugfix";
            const INCLUDE = "include-in-next-release";

            // Ensure the labels exist in the repo (create them if missing)
            async function ensureLabel(name, color, description) {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (e) {
                if (e.status === 404) {
                  await github.rest.issues.createLabel({
                    owner, repo, name, color, description
                  });
                } else {
                  throw e;
                }
              }
            }

            // Create both labels if not already present
            await ensureLabel(BUGFIX, "0E8A16", "Bug fix eligible for stabilisation");
            await ensureLabel(INCLUDE, "0366D6", "Include this change in the next stabilisation release");

            // Get current labels on the PR
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner, repo, issue_number
            });
            const current = new Set(currentLabels.map(l => l.name));

            // Logic:
            // If the checkbox line exists in the PR body:
            //   [x] → add the label
            //   [ ] → remove the label (if currently present)
            // If the checkbox line doesn't exist → do nothing (ignore)
            const ops = [];

            if (bugfixPresent) {
              if (bugfixChecked && !current.has(BUGFIX)) {
                ops.push(github.rest.issues.addLabels({ owner, repo, issue_number, labels: [BUGFIX] }));
              }
              if (!bugfixChecked && current.has(BUGFIX)) {
                ops.push(github.rest.issues.removeLabel({ owner, repo, issue_number, name: BUGFIX }).catch(() => {}));
              }
            }

            if (inNextPresent) {
              if (inNextChecked && !current.has(INCLUDE)) {
                ops.push(github.rest.issues.addLabels({ owner, repo, issue_number, labels: [INCLUDE] }));
              }
              if (!inNextChecked && current.has(INCLUDE)) {
                ops.push(github.rest.issues.removeLabel({ owner, repo, issue_number, name: INCLUDE }).catch(() => {}));
              }
            }

            await Promise.all(ops);
            core.info(`✅ Labels synced: bugfix=${bugfixChecked}, include-in-next=${inNextChecked}`);
